type DeleteError {
  error: DeleteErrorType!
}

enum DeleteErrorType {
  INVALID_ID
  NOT_FOUND
}

union DeleteResult = DeleteError | DeleteSuccess

type DeleteSuccess {
  success: Boolean!
}

type Folder {
  createdAt: String!
  id: ObjectId!
  name: String!
  notes: [Note!]!
  parent: Folder
  parentId: ObjectId
  subfolders: [Folder!]!
  updatedAt: String!
}

type FolderEdge {
  cursor: ObjectId!
  node: Folder!
}

type FolderError {
  error: FolderErrorType!
}

enum FolderErrorType {
  DUPLICATE_NAME
  INVALID_ID
  NOT_FOUND
  VALIDATION_ERROR
}

union FolderResult = FolderError | FolderSuccess

type FolderSuccess {
  folder: Folder!
}

type FoldersConnection {
  edges: [FolderEdge!]!
  pageInfo: PageInfo!
}

type Mutation {
  createFolder(name: String!, parentId: ObjectId): FolderResult!
  createNote(content: String, folderId: ObjectId, title: String!): NoteResult!
  deleteFolder(id: ObjectId!): DeleteResult!
  deleteNote(id: ObjectId!): DeleteResult!
  updateFolder(id: ObjectId!, name: String, parentId: ObjectId): FolderResult
  updateNote(content: String, folderId: ObjectId, id: ObjectId!, title: String): NoteResult
}

type Note {
  content: String
  createdAt: String!
  folder: Folder
  folderId: ObjectId
  id: ObjectId!
  title: String!
  updatedAt: String!
}

type NoteError {
  error: NoteErrorType!
}

enum NoteErrorType {
  DUPLICATE_TITLE
  INVALID_ID
  NOT_FOUND
  VALIDATION_ERROR
}

union NoteResult = NoteError | NoteSuccess

type NoteSuccess {
  note: Note!
}

scalar ObjectId

type PageInfo {
  endCursor: ObjectId
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ObjectId
}

type Query {
  folder(id: ObjectId!): FolderResult
  folders(after: ObjectId, first: Int): FoldersConnection!
  note(id: ObjectId!): NoteResult
  notes: [Note!]!
}